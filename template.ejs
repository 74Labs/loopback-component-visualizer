<!doctype html>
<html>
<head>
  <title>Loopback Component Visualizer</title>

  <script type="text/javascript" src="http://visjs.org/dist/vis.js"></script>
  <link href="http://visjs.org/dist/vis.css" rel="stylesheet" type="text/css" />

  <style type="text/css">
    #mynetwork {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
      margin: 0 auto;
    }
  </style>
</head>
<body>
<div id="mynetwork"></div>
<script type="text/javascript">

  var arr = [];

  <%
  var level = 0;
  var x = 0;
  for(var idx in models) {
    if(models[idx].definition && models[idx].definition.properties) {
      var propString = Object.keys(models[idx].definition.properties).toString().split(",").join("\\n-");
    }
    %>
    arr.push({id: <%= idx %>, label: '<%= models[idx].name  %> \n\n-<%= propString %>', shape: 'box', level: <%=level%>});
<%
    x++;
    if(x == 6) {
      x = 0;
      level++;
    }
   } %>
  // create an array with nodes
  var nodes = new vis.DataSet(arr);
  //
  // // create an array with edges
   var edges = new vis.DataSet();

  // create a network
  var container = document.getElementById('mynetwork');
  var data = {
    nodes: nodes,
    edges: edges
  };
  var options = {
  nodes: {
    borderWidth: 1,
    font: {
      color: '#343434',
      size: 14, // px
      face: 'arial',
      background: 'none',
      strokeWidth: 0, // px
      strokeColor: '#ffffff',
      align: 'left'
    }
  },
  layout: {
      hierarchical: {
          enabled: true,
          sortMethod: 'hubsize'
      }
  },
  physics: {
    stabilization: {
      fit: true
    }
  }
}
  var network = new vis.Network(container, data, options);
  network.stabilize();


</script>

</body>
</html>
